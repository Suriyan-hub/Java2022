1.Have the function ArrayChallenge(arr) read the array of integers stored in arr which will be in the following format:[k,r1,r2,r3...] where k represents the number of desks in a classroom, and the rest of the integers in the array will be in sorted order and will represent the desks that are already occupied.All of the desks will be arranged in 2 columns where desk#1 is at the top left,desk #2 is at the top right,desk #3 is below #1,desk #4 is below #2, etc. Your program should return the number of ways 2 students can be seated next to each other.This means 1 student is on the left and 1 student on the right,or 1 student is directly above or below the other student.

for example:if arr is[12,2,6,7,11]then this classrooms looks like the following picture:

	1	2
	3	4
	5	6
	7	8
	9	10
	11	12

Based on above arrangement of occupied desks,there are a total of 6 ways to seat 2 new students next to each other.The combinations are:[1,3],[3,4],[3,5],[8,10],[9,10],[10,12].So for this input your program should return 6.K will range from 2 to 24 and will always be an even number.After k ,the number of occupied deska in the array can range from 0 to K.

2.You are given an integer array containing 1 to n but one of the number from 1 to n in the array is missing. You need to provide optimum solution to find the missing number. Number cannot be repeated in the arry.

For example:
 
	int[] arr1={7,5,6,1,4,2};
	Missing number : 3
	int[] arr2={5,3,1,2};
	Missing number : 4

3.Here we have defined an abstract class Player and 3 sub-classes Bowler, Batsmen and WicketKeeper. We have added additional member variables and methods/functions in individual sub-classes. We have also created a constructor which initializes the member variables of the each player. The print method overrides the print method in the super-class Player and also add additional details for Bowler, Batsmen and WicketKeeper.
In the main method we have created a 11 player objects and initialized them with either Batsmen, Bowler or WicketKeeper. We have used the for-each loop to print the details of the each player. Please note that we have made the Player class abstract such that no object (or instance) of that class can be created.

4.You have thread T1, T2, and T3, how will you ensure that thread T2 run after T1 and thread T3 run after T2?

5.Given an Array of integers and an Integer k, Find the maximum element of from all the contiguous subarrays of size K.

For example:

Input :
Input : int[] arr = {2,6,-1,2,4,1,-6,5}
int k = 3
output : 6,6,4,4,4,5

